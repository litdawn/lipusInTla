import matplotlib.pyplot as plt
import numpy as np


class Analyst:

    def __init__(self, accuracy_list, loss_list, iteration):
        self.accuracy_list = accuracy_list
        self.loss_list = loss_list
        self.iteration = iteration
        # self.draw()

    def draw(self):
        x1 = range(0, self.iteration)
        x2 = range(0, self.iteration)
        y1 = self.accuracy_list
        y2 = self.loss_list
        plt.subplot(2, 1, 1)
        plt.plot(x1, y1, 'o-')
        plt.title('Test accuracy vs. epochs')
        plt.ylabel('Test accuracy')
        plt.subplot(2, 1, 2)
        plt.plot(x2, y2, '.-')
        plt.xlabel('Test loss vs. epoches')
        plt.ylabel('Test loss')
        plt.show()
        plt.savefig("accuracy_loss.jpg")

    def average_score(self, num=5, _scores=[]):
        new_scores = []
        for i in range(0, len(_scores), num):
            sum = 0
            for j in range(0, num):
                if i + j < len(_scores):
                    sum += _scores[i + j]
            sum /= num
            new_scores.append(sum)
        self.iteration = len(new_scores)
        self.accuracy_list = len(new_scores) * [1]
        self.loss_list = new_scores

        self.draw()

    def inv_hit_rate(self, _scores, draw=False):
        inv_hit_num = 0
        ind_hit_num = 0
        inv_hit_rates = []
        ind_hit_rates = []
        for i in range(0, len(_scores)):
            if _scores[i] != -10:
                inv_hit_num += 1
            if _scores[i] > 0:
                ind_hit_num += 1
            inv_hit_rates.append(inv_hit_num / (i + 1))
            ind_hit_rates.append(0 if inv_hit_num == 0 else ind_hit_num / (i + 1))
        if not draw:
            print(len(_scores), inv_hit_num)
            return inv_hit_rates, ind_hit_rates
        else:
            self.iteration = len(inv_hit_rates)
            self.accuracy_list = len(inv_hit_rates) * [1]
            self.loss_list = inv_hit_rates

            self.draw()

    def ind_hit_rate(self, _scores, draw=False):
        inv_num = 0
        hit_num = 0
        hit_rates = []
        for i in range(0, len(_scores)):
            if _scores[i] != -10:
                inv_num += 1

    def draw_two_hit_rate(self, scores1, scores2):
        hits1_inv, hits1_ind = self.calculate(scores1)
        hits2_inv, hits2_ind = self.calculate(scores2)
        x2 = range(0, len(hits2_inv))
        x1 = range(0, len(hits1_inv))
        plt.subplot(2, 1, 1)
        plt.plot(x1, hits1_inv, "r", label="RL")
        plt.plot(x2, hits2_inv, "g", label="random")

        plt.subplot(2, 1, 2)
        plt.plot(x1, hits1_ind, "r", label="RL")
        plt.plot(x2, hits2_ind, "g", label="random")
        plt.legend()

        plt.xlabel("episode")
        plt.ylabel("hit rate")
        plt.show()

    def calculate(self, scores):

        inv_hit_rate = []
        ind_hit_rate = []
        generate_num = 0
        inv_num = 0
        ind_total_num = 0
        ind_num = 0
        for i in range(len(scores[0])):
            ind_total_num += scores[2][i]
        for i in range(len(scores[0])):
            generate_num += scores[0][i]
            inv_num += scores[1][i]
            ind_num += scores[2][i]
            inv_hit_rate.extend([inv_num / generate_num] * scores[0][i])
            ind_hit_rate.extend([ind_num / inv_num] * scores[0][i])

        return inv_hit_rate, ind_hit_rate


if __name__ == "__main__":
    analyst = Analyst([1, 1, 1, 1, 1], [1, 2, 3, 4, 5], 5)
    # scores = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 5, -1, -10, -10, -1, -10, -10,
    #           5, 5, -10, -1, 5, -10, -10, -10, -10, -1, -1, -10, -10, -10, -10, -10, -10, -10, 5] toy_consensus_epr

    #
    # scores2 = [-10, 5, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, 5, -10, -10, -10, 5, -10, -10, -10, -10,
    #           -10, -10, -10, 5, -10, -10, 5, -10, -10, -10, -10, 5, -10, -10, -10, -10, -10, -10, 5, -10, 5, -10,
    #           -10, -10, -10, -10, -10, 5, -10, 5, -10, -10, -10, -10, 5, -10, -10, -10, -10, -10, -10, -10, -10,
    #           -10, -10, -10, -10, -10, -10, -10, 5, -10, -1, -10, -10, -10, -10, -10, -10, 5, -10, -1, -10, -10,
    #           -10, -10, -10, -10, 5]# lockserv random
    #
    # scores1 = [-10, -10, -10, -10, -10, 5, -10, -10, -10,
    #           -10, -10, -10, -10, -10, -10, -10, -10, 5, 5, -10, -10, 5, -10, -10, -10, -10, -10, -10, -10, -10,
    #           -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 5, -10, -1, -1, -10, -10, 5, -1, -1, -10, -1,
    #           -10, -10, -1, -10, -10, -10, -10, -10, -1, 5, -10, -10, -10, -10, 5, -10, -1, -1, -10, -10, -10, -10,
    #           -10, -10, -10, -1, -1, -1, -10, -10] #lockserv
    #
    # #

    # scores1 = [-10, -10, -10, -10, -1, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10,
    #            -10, -10, -10, -10, -1, -10, -10, -1, -10, -10, -10, -1, -1, -10, -10, -10, -10, -10, -10, -10, -1,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -1, 5, -1, -1, -10, -1, -10, -10, -10, -1, -10, -10, -1, -10, -10, -1, -1, -10, -1, -1, -1, -10,
    #            -1]  # toy_consensus_forall
    #
    # scores2 = [-10, -10, -10, -10, -10, 5, -10, -10, -10, -10, 5, -10, -10, -10, -10, -10, -1, -1, -10, 5, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, 5, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10,
    #            -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10]
    # scores1 = [-10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, 5, -1,
    #            -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -1, -1, -10, -1, -10, -10, -10, -1, -1, -10, -10,
    #            5, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, 5, 5, -10, -10,
    #            -10, -10, 5, 5, -10, -10, 5, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -1, -10, -10, -1, -10, -10, -10, 5, -10, -10, -10, -10, 5, 5, -10, -10, -1, -1, -1, -1, -10,
    #            -10,
    #            -10, -1, -10, -10, -1, -1, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10,
    #            -10,
    #            -10, -10, -10, -10, 5, -10, -1, -10, -10, -10, -10, -10, -10, -1, 5, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -1, -10, -10,
    #            -10, -10, -10, -10, -1, -1, -10, -10, -1, -1, -10, -10, -10, -1, -1, -10, -10,
    #            -10, -10, -1, 5, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -1, -10, -10, -10, -10, -10, 5, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10,
    #            -10, -10, -10, -1, -10, -10, -1, -10, -10, -10, -10, -1, -1, -10, -10, -10, -1, -10, -1, -10, -10, -10,
    #            -1, -1, -1, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10,
    #            -1, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -1, -10, -1, -10, 5, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -1, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -1,
    #            -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10,
    #            -10, -10, -1, -10, -10, -1, -10, -1, -10, -1, -10, -1, -1, -10, -10, -10, -10, -1, -10, -10, -1, -10,
    #            -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -1, 5, -1, -10, -10, -1, -10, -1, -10, -1, -10, -10, -10, 5, -10, -1, -10, -1, -10, -10, -10, -10,
    #            -1, -1, -10, -10, -1, -10, 5, -10, -1, -1, -10, -1, -10, -10, -1, -10, -10, -1, -10, -10, -1, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -1, -10, -10, -10, -10, -10, -10, -1,
    #            -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -1, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10,
    #            -10,
    #            -1, -10, -10, -10, -10, -10, -10, -10, -10, -1, -1, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -1, -10, -10,
    #            -10, -1, -10, -10, -1, -10, -10, -10, -1, -1, -10, -1, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, 5, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -1, -1, -10, -10, -10, -1, -10, -10, -1, -10, -1, -10, -1, -10,
    #            -10, 5]
    # scores1 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 5, -10, -10, -1, -10, -10, -1, -10, -10, -1, -10,
    #            -10, -10, -10, 5, -10, -1, -10, -10, -10, 5, -10, -1, -1, -10, -1, -10, -1, -10, -1, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -1, -10, -10, -1, -10,
    #            -10, -10, -1, -10, -1, -10, -10, -1, -10, -10, 5, -10, -1, -1, -10, -10, -10, -10, -1, -1, -1, -10, -10,
    #            -10, -1, -1, -10, -1, -10, -10, -10, -10, -1, -10, 5, -10, -10, -1, -1, 5, -1, -1, -10, 5, -1, -10, 5,
    #            -10, -1, -1, -10, -10, -10, -10, 5, -10, -10, 5, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10,
    #            -10, -1, -1, -10, -1, -1, -10, -10, -10, -10, -1, -10, -1, -10, -10, -10, -10, -1, -1, -1, -1, -10, -10,
    #            -1, -10, -10, -1, -10, -1, 5, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -1, -10, -10, -10, -10,
    #            -1, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -1, -1, -10, -10, -1, -1, -10, -10, -10, -1, -10, -1,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, 5, -10, -10, -10, -10, -1, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 5, -10, -10, -1, -10, -10, -1, -10, -10, -1, -1, -10,
    #            -10, -1, -10, -10, -1, -10, -10, -10, -1, -1, -10, 5, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10,
    #            -1, -1, -1, -1, 5, -1, -10, -10, -10, -10, -10, -10, -1, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10,
    #            -10, -10, -10, 5, -1, -1, -1, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10,
    #            -10, -10, -10, -1, -1, -10, -10, -10, -10, -10, -1, -10, -1, -1, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -1, -1, -1, -1, -10, -1, -10, -10, -10, -10, -10, -1, -1, -10, -10, -1, -10, -10, -10, -10, -1, -10,
    #            -10, -10, -10, -10, -10, -10, -1, -1, -10, -1, -1, -1, -10, -1, -10, -1, -1, -10, -10, -10, -10, -10,
    #            -10, -1, -1, -10, -10, -10, -1, -10, -10, -1, -1, -10, -10, -1, -10, -10, -1, -10, -1, 5, -10, -10, -10,
    #            -10, -10, -1, -1, -10, -10, -1, -10, -10, -1, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -1, -1,
    #            -10, -10, -1, -10, -1, -10, -10, -1, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10, -10, -1, -10, -10,
    #            -1, -10, -10, -10, -10, -1, -1, -10, -10, -10, -10, -10, -10, -10, -10, -1, 5, -10, -10, -10, -10, -1,
    #            -10, -10, -10, -1, -1, -1, -1, -10, -1, -1, -10, -10, -10, -10, -1, -10, -10, -10, -1, -1, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -1, -1, -10, -10, -1, -10, -10, -10,
    #            -10, -10, -10, -10, -1, -10, -1, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -1, -10, -10, -10, -1, -1, -1, -1, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10,
    #            -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -1, -10, -10, -10, -10,
    #            -10, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -1, -10, -10, -10, -1,
    #            -10, -10, -10, -1, -1, -10, -10, -10, -10, -10, -1, -1, -1, -10, -1, -1, -10, -10, -10, -10, -10, -1,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -1, -10,
    #            -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -1, -10, -1, -1, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -10, -10, -1,
    #            -10, -1, -1, -10, -1, -10, -10, -10, -10, -1, -1, -10, -10, -1, -10, -1, -10, -1, -10, -10, -10]
    # scores1 = [
    #     [242, 234, 162, 238, 156, 210, 210, 156, 108, 212, 196, 206, 216, 188, 204, 188, 160, 196, 132, 188, 164, 180,
    #      196],
    #     [115, 82, 84, 78, 67, 102, 66, 55, 50, 78, 92, 72, 87, 66, 109, 91, 72, 84, 42, 77, 67, 90, 90],
    #     [6, 3, 0, 0, 2, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
    # scores1 = [
    #     [242, 216, 162, 162, 232, 236, 192, 194, 162, 160, 144, 144],
    #     [55, 71, 84, 76, 95, 77, 34, 45, 64, 60, 64, 74],
    #     [4, 4, 1, 2, 2, 0, 0, 0, 1, 1, 1, 1],
    # ]
    # scores1 = [
    #     [242, 216, 240, 238, 156, 214, 192, 160, 160, 160, 160, 160, 144, 160, 144, 188, 140, 152, 104, 188, 172,
    #      156,],
    #     [80, 87, 76, 83, 52, 110, 76, 64, 78, 76, 84, 60, 41, 84, 52, 68, 55, 73, 45, 77, 78,72,],
    #     [1, 3, 1, 1, 1, 2, 0, 1, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1,]
    # ]
    # scores1=[
    #     [242, 240, 232, 210, 228, 160, 156, 162, 160, 160, 160],
    #     [83, 95, 56, 90, 98, 64, 64, 78, 60, 52, 84],
    #     [2, 4, 0, 1, 0, 1, 1, 2, 0, 2, 1]
    # ]
    # scores2 = [[242, 234, 234, 232, 234, 208, 192, 216, 218, 196, 212, 188, 156, 196, 192, 176, 196, 176, 192, 184],
    #            [87, 115, 62, 107, 87, 51, 57, 44, 81, 106, 71, 89, 93, 77, 34, 53, 92, 74, 69, 75],
    #            [1, 3, 2, 5, 1, 2, 1, 0, 0, 1, 1,0, 0, 1, 0, 0, 0,  0, 0, 1]]

    # scores2 = [-10, -10, -1, -10, -10, -10, -10, -10, -10, 5, -10, -10, -10, -10, 5, -10, -10, -10, -10, -10, -10,
    #            -10, -1, 5, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -1, -10, -10, -10, 5, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -1,
    #            -10, -10, -10, -10, -10, -10, -10, 5, -10, -10, -10, 5, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1,
    #            -1, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -1, 5, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -1, -10, -1,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 5, -10, -10, -10, -1, -10, 5, -10, -10, -10, 5, -10, 5,
    #            -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 5, -1, -10, -10,
    #            -10, -10, -10, -10, -10, 5, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, 5, -10, -1, -1,
    #            -10, -10, -1, -10, -10, -1, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10,
    #            -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 5, -10, -10, -1, -10, -1, -1,
    #            -1, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10,
    #            -10,
    #            -1, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -1, -1, -1, -10, -10,
    #            -10, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -10, -1, -10, -10, -10, -10, -10, -1,
    #            -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -1, -10, -1, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, 5, -10, -10, -10, -10, -10, -1, -1, -10, -10, -1, -10, -10, -10,
    #            -10, -10, -1, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -1, -1, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10,
    #            -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -10, -1, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -1, -10, -1, -10, -1,
    #            -10, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -1, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10,
    #            -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -1, -10, -1, -10, -10, -10, -10,
    #            -10, -1, -1, -1, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -1, -10, -1, -10,
    #            -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10,
    #            -10, -1, -10, -10, -1, -10, -10,
    #            -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10,
    #            -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -1, -10, -10, -10, -10,
    #            -10, -10, -10, -10, -1, -10, -1,
    #            -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1,
    #            -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -1,
    #            -10, -10, -1, -1, -10, -10, -10, -10, -10, -1, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
    #            -10, -10, -1, -10, -10, -10, -10, -10, -10, -1, -1, -10, -1, -10, -10, -10, -10, -10, -10, -1, -10, -10,
    #            -1, -1, -1, -10, -10, -1, -1, -10, -10, -10, -10, -10, -10, -10, -10, -1, -10, -10, -10, -1, -10, -10,
    #            -1, -1, -1, -10, -1, -1, -10, -10, -1, -10, -1, -10, -10, -10, -10, -10]
    # scores1=[[242, 242, 160, 234],
    # [27, 12, 8, 234],
    # [1, 1, 0, 1]]
    # scores2=[
    #     [242, 242, 240, 238, 224, 222],
    #     [13, 27, 12, 11, 11, 222],
    #     [4, 1, 1, 1, 1, 1]
    # ]
    # analyst.average_score(_scores=scores1)
    analyst.draw_two_hit_rate(scores1, scores2)
    # analyst.inv_hit_rate(scores1, True)
