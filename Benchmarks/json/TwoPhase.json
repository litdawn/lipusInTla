{"location":"line 1, col 1 to line 201, col 77 of module TwoPhase","moduleInfo":{"location":"line 1, col 1 to line 1, col 77 of module TwoPhase","moduleName":"TwoPhase"},"extends":{"extendedModuleNames":["TLC","Naturals"],"location":"line 3, col 1 to line 3, col 21 of module TwoPhase"},"body":{"declaredParams":[{"location":"line 22, col 1 to line 22, col 11 of module TwoPhase","paramName":"RM"}],"definedVariables":[{"variableName":"VARIABLES"},{"variableName":"rmState"},{"variableName":"tmState"},{"variableName":"tmPrepared"},{"variableName":"msgs"}],"location":"line 22, col 1 to line 179, col 77 of module TwoPhase","operatorDefinitions":[{"concreteContent":"vars == <<rmState, tmState, tmPrepared, msgs>>","location":"line 30, col 1 to line 30, col 46 of module TwoPhase","operatorName":"vars","type":"State"},{"concreteContent":"Message ==\n  (*************************************************************************)\n  (* The set of all possible messages.  Messages of type $\"Prepared\"$ are  *)\n  (* sent from the RM indicated by the message's $rm$ field to the TM\\@.   *)\n  (* Messages of type $\"Commit\"$ and $\"Abort\"$ are broadcast by the TM, to *)\n  (* be received by all RMs.  The set $msgs$ contains just a single copy   *)\n  (* of such a message.                                                    *)\n  (*************************************************************************)\n  [type : {\"Prepared\"}, rm : RM]  \\cup  [type : {\"Commit\", \"Abort\"}]\n","location":"line 48, col 1 to line 56, col 68 of module TwoPhase","operatorName":"Message","type":"State"},{"concreteContent":"TypeOK ==  \n  (*************************************************************************)\n  (* The type-correctness invariant                                        *)\n  (*************************************************************************)\n  /\\ rmState \\in [RM -> {\"working\", \"prepared\", \"committed\", \"aborted\"}]\n  /\\ tmState \\in {\"init\", \"committed\", \"aborted\"}\n  /\\ tmPrepared \\in SUBSET RM\n  /\\ msgs \\in SUBSET Message\n","location":"line 58, col 1 to line 65, col 28 of module TwoPhase","operatorName":"TypeOK","type":"State"},{"concreteContent":"Init ==   \n  (*************************************************************************)\n  (* The initial predicate.                                                *)\n  (*************************************************************************)\n  /\\ rmState = [rm \\in RM |-> \"working\"]\n  /\\ tmState = \"init\"\n  /\\ tmPrepared   = {}\n  /\\ msgs = {}\n","location":"line 67, col 1 to line 74, col 14 of module TwoPhase","operatorName":"Init","type":"State"},{"concreteContent":"TMRcvPrepared(rm) ==\n  (*************************************************************************)\n  (* The TM receives a $\"Prepared\"$ message from resource manager $rm$.    *)\n  (*************************************************************************)\n  /\\ tmState = \"init\"\n  /\\ [type |-> \"Prepared\", rm |-> rm] \\in msgs\n  /\\ tmPrepared' = tmPrepared \\cup {rm}\n  /\\ UNCHANGED <<rmState, tmState, msgs>>\n","location":"line 80, col 1 to line 87, col 41 of module TwoPhase","operatorName":"TMRcvPrepared","paramNum":1,"type":"Action"},{"concreteContent":"TMCommit ==\n  (*************************************************************************)\n  (* The TM commits the transaction; enabled iff the TM is in its initial  *)\n  (* state and every RM has sent a $\"Prepared\"$ message.                   *)\n  (*************************************************************************)\n  /\\ tmState = \"init\"\n  /\\ tmPrepared = RM\n  /\\ tmState' = \"committed\"\n  /\\ msgs' = msgs \\cup {[type |-> \"Commit\"]}\n  /\\ UNCHANGED <<rmState, tmPrepared>>\n","location":"line 89, col 1 to line 98, col 38 of module TwoPhase","operatorName":"TMCommit","type":"State"},{"concreteContent":"TMAbort ==\n  (*************************************************************************)\n  (* The TM spontaneously aborts the transaction.                          *)\n  (*************************************************************************)\n  /\\ tmState = \"init\"\n  /\\ tmState' = \"aborted\"\n  /\\ msgs' = msgs \\cup {[type |-> \"Abort\"]}\n  /\\ UNCHANGED <<rmState, tmPrepared>>\n","location":"line 100, col 1 to line 107, col 38 of module TwoPhase","operatorName":"TMAbort","type":"State"},{"concreteContent":"RMPrepare(rm) == \n  (*************************************************************************)\n  (* Resource manager $rm$ prepares.                                       *)\n  (*************************************************************************)\n  /\\ rmState[rm] = \"working\"\n  /\\ rmState' = [rmState EXCEPT ![rm] = \"prepared\"]\n  /\\ msgs' = msgs \\cup {[type |-> \"Prepared\", rm |-> rm]}\n  /\\ UNCHANGED <<tmState, tmPrepared>>\n","location":"line 109, col 1 to line 116, col 38 of module TwoPhase","operatorName":"RMPrepare","paramNum":1,"type":"Action"},{"concreteContent":"RMChooseToAbort(rm) ==\n  (*************************************************************************)\n  (* Resource manager $rm$ spontaneously decides to abort.  As noted       *)\n  (* above, $rm$ does not send any message in our simplified spec.         *)\n  (*************************************************************************)\n  /\\ rmState[rm] = \"working\"\n  /\\ rmState' = [rmState EXCEPT ![rm] = \"aborted\"]\n  /\\ UNCHANGED <<tmState, tmPrepared, msgs>>\n","location":"line 118, col 1 to line 125, col 44 of module TwoPhase","operatorName":"RMChooseToAbort","paramNum":1,"type":"Action"},{"concreteContent":"RMRcvCommitMsg(rm) ==\n  (*************************************************************************)\n  (* Resource manager $rm$ is told by the TM to commit.                    *)\n  (*************************************************************************)\n  /\\ [type |-> \"Commit\"] \\in msgs\n  /\\ rmState[rm] # \"committed\" \\* no need to commit twice.\n  /\\ rmState' = [rmState EXCEPT ![rm] = \"committed\"]\n  /\\ UNCHANGED <<tmState, tmPrepared, msgs>>\n","location":"line 127, col 1 to line 134, col 44 of module TwoPhase","operatorName":"RMRcvCommitMsg","paramNum":1,"type":"Action"},{"concreteContent":"RMRcvAbortMsg(rm) ==\n  (*************************************************************************)\n  (* Resource manager $rm$ is told by the TM to abort.                     *)\n  (*************************************************************************)\n  /\\ [type |-> \"Abort\"] \\in msgs\n  /\\ rmState[rm] # \"aborted\" \\* no need to abort twice.\n  /\\ rmState' = [rmState EXCEPT ![rm] = \"aborted\"]\n  /\\ UNCHANGED <<tmState, tmPrepared, msgs>>\n","location":"line 136, col 1 to line 143, col 44 of module TwoPhase","operatorName":"RMRcvAbortMsg","paramNum":1,"type":"Action"},{"concreteContent":"Next ==\n  \\/ TMCommit \n  \\/ TMAbort\n  \\/ \\E rm \\in RM : TMRcvPrepared(rm) \n  \\/ \\E rm \\in RM : RMPrepare(rm) \n  \\/ \\E rm \\in RM : RMChooseToAbort(rm)\n  \\/ \\E rm \\in RM : RMRcvCommitMsg(rm) \n  \\/ \\E rm \\in RM : RMRcvAbortMsg(rm)\n","location":"line 145, col 1 to line 152, col 37 of module TwoPhase","operatorName":"Next","type":"State"},{"concreteContent":"TPSpec == Init /\\ [][Next]_<<rmState, tmState, tmPrepared, msgs>>","location":"line 154, col 1 to line 154, col 65 of module TwoPhase","operatorName":"TPSpec","type":"State"},{"concreteContent":"NextUnchanged == UNCHANGED vars","location":"line 156, col 1 to line 156, col 31 of module TwoPhase","operatorName":"NextUnchanged","type":"State"},{"concreteContent":"Symmetry == Permutations(RM)","location":"line 158, col 1 to line 158, col 28 of module TwoPhase","operatorName":"Symmetry","type":"State"},{"concreteContent":"Test == TLCGet(\"level\")<20","location":"line 160, col 1 to line 160, col 26 of module TwoPhase","operatorName":"Test","type":"State"},{"concreteContent":"TCConsistent ==  \n  (*************************************************************************)\n  (* A state predicate asserting that two RMs have not arrived at          *)\n  (* conflicting decisions.                                                *)\n  (*************************************************************************)\n  \\A rm1, rm2 \\in RM : ~ (rmState[rm1] = \"aborted\" /\\ rmState[rm2] = \"committed\")\n","location":"line 163, col 1 to line 168, col 81 of module TwoPhase","operatorName":"TCConsistent","type":"State"}]}}