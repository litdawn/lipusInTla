{"location":"line 1, col 1 to line 71, col 77 of module TCommit","moduleInfo":{"location":"line 1, col 1 to line 1, col 77 of module TCommit","moduleName":"TCommit"},"extends":{"extendedModuleNames":["TLC"],"location":"line 3, col 1 to line 3, col 11 of module TCommit"},"body":{"declaredParams":[{"location":"line 5, col 1 to line 5, col 11 of module TCommit","paramName":"RM"}],"definedVariables":[{"variableName":"rmState"}],"location":"line 5, col 1 to line 70, col 28 of module TCommit","operatorDefinitions":[{"concreteContent":"TCTypeOK == \n  (*************************************************************************)\n  (* The type-correctness invariant                                        *)\n  (*************************************************************************)\n  rmState \\in [RM -> {\"working\", \"prepared\", \"committed\", \"aborted\"}]\n","location":"line 8, col 1 to line 12, col 69 of module TCommit","operatorName":"TCTypeOK","type":"State"},{"concreteContent":"Init ==   rmState = [rm \\in RM |-> \"working\"]","location":"line 14, col 1 to line 14, col 45 of module TCommit","operatorName":"Init","type":"State"},{"concreteContent":"canCommit == \\A rm \\in RM : rmState[rm] \\in {\"prepared\", \"committed\"}","location":"line 19, col 1 to line 19, col 69 of module TCommit","operatorName":"canCommit","type":"State"},{"concreteContent":"notCommitted == \\A rm \\in RM : rmState[rm] # \"committed\"","location":"line 24, col 1 to line 24, col 56 of module TCommit","operatorName":"notCommitted","type":"State"},{"concreteContent":"Prepare(rm) == /\\ rmState[rm] = \"working\"\n               /\\ rmState' = [rmState EXCEPT ![rm] = \"prepared\"]\n","location":"line 34, col 1 to line 35, col 64 of module TCommit","operatorName":"Prepare","paramNum":1,"type":"Action"},{"concreteContent":"Decide(rm)  == \\/ /\\ rmState[rm] = \"prepared\"\n                  /\\ canCommit\n                  /\\ rmState' = [rmState EXCEPT ![rm] = \"committed\"]\n               \\/ /\\ rmState[rm] \\in {\"working\", \"prepared\"}\n                  /\\ notCommitted\n                  /\\ rmState' = [rmState EXCEPT ![rm] = \"aborted\"]\n","location":"line 37, col 1 to line 42, col 66 of module TCommit","operatorName":"Decide","paramNum":1,"type":"Action"},{"concreteContent":"Next == \\E rm \\in RM : Prepare(rm) \\/ Decide(rm)","location":"line 44, col 1 to line 44, col 48 of module TCommit","operatorName":"Next","type":"State"},{"concreteContent":"TCSpec == Init /\\ [][Next]_rmState","location":"line 49, col 1 to line 49, col 34 of module TCommit","operatorName":"TCSpec","type":"State"},{"concreteContent":"TCConsistent ==  \n  (*************************************************************************)\n  (* A state predicate asserting that two RMs have not arrived at          *)\n  (* conflicting decisions.                                                *)\n  (*************************************************************************)\n  \\A rm1, rm2 \\in RM : ~ /\\ rmState[rm1] = \"aborted\"\n                         /\\ rmState[rm2] = \"committed\"\n","location":"line 57, col 1 to line 63, col 54 of module TCommit","operatorName":"TCConsistent","type":"State"},{"concreteContent":"Symmetry == Permutations(RM)","location":"line 70, col 1 to line 70, col 28 of module TCommit","operatorName":"Symmetry","type":"State"}]}}