{"location":"line 1, col 1 to line 66, col 4 of module lockserver","moduleInfo":{"location":"line 1, col 1 to line 1, col 27 of module lockserver","moduleName":"lockserver"},"extends":{"extendedModuleNames":["TLC","Naturals"],"location":"line 4, col 1 to line 4, col 21 of module lockserver"},"body":{"declaredParams":[{"location":"line 14, col 1 to line 14, col 22 of module lockserver","paramName":"Server"},{"location":"line 16, col 1 to line 16, col 12 of module lockserver","paramName":"Nil"}],"definedVariables":[{"variableName":"semaphore"},{"variableName":"clientlocks"}],"location":"line 14, col 1 to line 64, col 78 of module lockserver","operatorDefinitions":[{"concreteContent":"vars == <<semaphore, clientlocks>>","location":"line 21, col 1 to line 21, col 34 of module lockserver","operatorName":"vars","type":"State"},{"concreteContent":"Connect(c, s) == \n    \\* The server must currently hold the lock.\n    /\\ semaphore[s] = TRUE\n    \\* The client obtains the lock of s.\n    /\\ clientlocks' = [clientlocks EXCEPT ![c] = clientlocks[c] \\cup {s}]\n    /\\ semaphore' = [semaphore EXCEPT ![s] = FALSE]\n","location":"line 24, col 1 to line 29, col 51 of module lockserver","operatorName":"Connect","paramNum":2,"type":"Action"},{"concreteContent":"Disconnect(c, s) ==\n    \\* The client must currently be holding the lock of s.\n    /\\ s \\in clientlocks[c]\n    \\* The relinquishes the lock of s.\n    /\\ clientlocks' = [clientlocks EXCEPT ![c] = clientlocks[c] \\ {s}]\n    /\\ semaphore' = [semaphore EXCEPT ![s] = TRUE]\n","location":"line 33, col 1 to line 38, col 50 of module lockserver","operatorName":"Disconnect","paramNum":2,"type":"Action"},{"concreteContent":"Init == \n    \\* Initially each server holds its lock, and all clients hold \n    \\* no locks.\n    /\\ semaphore = [i \\in Server |-> TRUE]\n    /\\ clientlocks = [i \\in Client |-> {}]\n","location":"line 40, col 1 to line 44, col 42 of module lockserver","operatorName":"Init","type":"State"},{"concreteContent":"Next == \n    \\/ \\E c \\in Client, s \\in Server : Connect(c, s)\n    \\/ \\E c \\in Client, s \\in Server : Disconnect(c, s)\n","location":"line 46, col 1 to line 48, col 55 of module lockserver","operatorName":"Next","type":"State"},{"concreteContent":"NextUnchanged == UNCHANGED vars","location":"line 50, col 1 to line 50, col 31 of module lockserver","operatorName":"NextUnchanged","type":"State"},{"concreteContent":"TypeOK == \n    /\\ semaphore \\in [Server -> BOOLEAN]\n    /\\ clientlocks \\in [Client -> SUBSET Server]\n","location":"line 52, col 1 to line 54, col 48 of module lockserver","operatorName":"TypeOK","type":"State"},{"concreteContent":"Inv == \\A ci,cj \\in Client : (clientlocks[ci] \\cap clientlocks[cj] # {}) => (ci = cj)","location":"line 57, col 1 to line 57, col 85 of module lockserver","operatorName":"Inv","type":"State"},{"concreteContent":"Ind == \n    /\\ TypeOK\n    /\\ Inv\n    \\* A client and server never hold the same lock at the same time.\n    /\\ \\A c \\in Client, s \\in Server : (s \\in clientlocks[c]) => ~semaphore[s]\n","location":"line 60, col 1 to line 64, col 78 of module lockserver","operatorName":"Ind","type":"State"}]}}