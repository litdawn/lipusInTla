{"location":"line 1, col 1 to line 213, col 77 of module MongoLoglessDynamicRaft","moduleInfo":{"location":"line 1, col 1 to line 1, col 40 of module MongoLoglessDynamicRaft","moduleName":"MongoLoglessDynamicRaft"},"extends":{"extendedModuleNames":["Naturals","Integers","FiniteSets","Sequences","TLC","Randomization"],"location":"line 7, col 1 to line 7, col 69 of module MongoLoglessDynamicRaft"},"body":{"declaredParams":[{"location":"line 9, col 1 to line 9, col 16 of module MongoLoglessDynamicRaft","paramName":"Server"},{"location":"line 10, col 1 to line 10, col 33 of module MongoLoglessDynamicRaft","paramName":"Secondary"},{"location":"line 11, col 1 to line 11, col 17 of module MongoLoglessDynamicRaft","paramName":"InitTerm"},{"location":"line 180, col 1 to line 180, col 46 of module MongoLoglessDynamicRaft","paramName":"MaxTerm"}],"definedVariables":[{"variableName":"currentTerm"},{"variableName":"state"},{"variableName":"configVersion"},{"variableName":"configTerm"},{"variableName":"config"}],"location":"line 9, col 1 to line 211, col 26 of module MongoLoglessDynamicRaft","operatorDefinitions":[{"concreteContent":"vars == <<currentTerm, state, configVersion, configTerm, config>>","location":"line 30, col 1 to line 30, col 65 of module MongoLoglessDynamicRaft","operatorName":"vars","type":"State"},{"concreteContent":"Quorums(S) == {i \\in SUBSET(S) : Cardinality(i) * 2 > Cardinality(S)}","location":"line 37, col 1 to line 37, col 69 of module MongoLoglessDynamicRaft","operatorName":"Quorums","paramNum":1,"type":"Action"},{"concreteContent":"QuorumsAt(i) == Quorums(config[i])","location":"line 39, col 1 to line 39, col 34 of module MongoLoglessDynamicRaft","operatorName":"QuorumsAt","paramNum":1,"type":"Action"},{"concreteContent":"Empty(s) == Len(s) = 0","location":"line 42, col 1 to line 42, col 22 of module MongoLoglessDynamicRaft","operatorName":"Empty","paramNum":1,"type":"Action"},{"concreteContent":"IsNewerConfig(i, j) ==\n    \\/ configTerm[i] > configTerm[j]\n    \\/ /\\ configTerm[i] = configTerm[j]\n       /\\ configVersion[i] > configVersion[j]\n","location":"line 46, col 1 to line 49, col 45 of module MongoLoglessDynamicRaft","operatorName":"IsNewerConfig","paramNum":2,"type":"Action"},{"concreteContent":"IsNewerOrEqualConfig(i, j) ==\n    \\/ /\\ configTerm[i] = configTerm[j]\n       /\\ configVersion[i] = configVersion[j]\n    \\/ IsNewerConfig(i, j)\n","location":"line 51, col 1 to line 54, col 26 of module MongoLoglessDynamicRaft","operatorName":"IsNewerOrEqualConfig","paramNum":2,"type":"Action"},{"concreteContent":"NewerConfig(ci, cj) ==\n    \\* Compare configTerm first.\n    \\/ ci[2] > cj[2] \n    \\* Compare configVersion if terms are equal.\n    \\/ /\\ ci[2] = cj[2]\n       /\\ ci[1] > cj[1]\n","location":"line 57, col 1 to line 62, col 23 of module MongoLoglessDynamicRaft","operatorName":"NewerConfig","paramNum":2,"type":"Action"},{"concreteContent":"NewerOrEqualConfig(ci, cj) == NewerConfig(ci, cj) \\/ ci = cj","location":"line 65, col 1 to line 65, col 60 of module MongoLoglessDynamicRaft","operatorName":"NewerOrEqualConfig","paramNum":2,"type":"Action"},{"concreteContent":"CanVoteForConfig(i, j, term) ==\n    /\\ currentTerm[i] < term\n    /\\ IsNewerOrEqualConfig(j, i)\n","location":"line 68, col 1 to line 70, col 33 of module MongoLoglessDynamicRaft","operatorName":"CanVoteForConfig","paramNum":3,"type":"Action"},{"concreteContent":"QuorumsOverlap(x, y) == \\A qx \\in Quorums(x), qy \\in Quorums(y) : qx \\cap qy # {}","location":"line 73, col 1 to line 73, col 81 of module MongoLoglessDynamicRaft","operatorName":"QuorumsOverlap","paramNum":2,"type":"Action"},{"concreteContent":"ConfigIsCommitted(s) == \n    /\\ state[s] = Primary\n    \\* Config must be in the term of this primary.\n    /\\ configTerm[s] = currentTerm[s]\n    /\\ \\E Q \\in QuorumsAt(s) : \n        \\A t \\in Q : \n            \\* Node must have the same config as the primary.\n            /\\ configVersion[s] = configVersion[t]\n            /\\ configTerm[s] = configTerm[t]\n            \\* Node must be in the same term as the primary (and the config).\n            /\\ currentTerm[t] = currentTerm[s]\n","location":"line 78, col 1 to line 88, col 46 of module MongoLoglessDynamicRaft","operatorName":"ConfigIsCommitted","paramNum":1,"type":"Action"},{"concreteContent":"UpdateTermsExpr(i, j) ==\n    /\\ currentTerm[i] > currentTerm[j]\n    /\\ currentTerm' = [currentTerm EXCEPT ![j] = currentTerm[i]]\n    /\\ state' = [state EXCEPT ![j] = Secondary]\n","location":"line 97, col 1 to line 100, col 47 of module MongoLoglessDynamicRaft","operatorName":"UpdateTermsExpr","paramNum":2,"type":"Action"},{"concreteContent":"UpdateTerms(i, j) == \n    /\\ UpdateTermsExpr(i, j)\n    /\\ UNCHANGED <<configVersion, configTerm, config>>\n","location":"line 102, col 1 to line 104, col 54 of module MongoLoglessDynamicRaft","operatorName":"UpdateTerms","paramNum":2,"type":"Action"},{"concreteContent":"BecomeLeader(i, voteQuorum) == \n    \\* Primaries make decisions based on their current configuration.\n    LET newTerm == currentTerm[i] + 1 IN\n    /\\ i \\in config[i] \\* only become a leader if you are a part of your config.\n    /\\ i \\in voteQuorum \\* The new leader should vote for itself.\n    /\\ \\A v \\in voteQuorum : CanVoteForConfig(v, i, newTerm)\n    \\* Update the terms of each voter.\n    /\\ currentTerm' = [s \\in Server |-> IF s \\in voteQuorum THEN newTerm ELSE currentTerm[s]]\n    /\\ state' = [s \\in Server |->\n                    IF s = i THEN Primary\n                    ELSE IF s \\in voteQuorum THEN Secondary \\* All voters should revert to secondary state.\n                    ELSE state[s]]\n    \\* Update config's term on step-up.\n    /\\ configTerm' = [configTerm EXCEPT ![i] = newTerm]\n    /\\ UNCHANGED <<config, configVersion>>\n","location":"line 106, col 1 to line 120, col 42 of module MongoLoglessDynamicRaft","operatorName":"BecomeLeader","paramNum":2,"type":"Action"},{"concreteContent":"Reconfig(i, newConfig) ==\n    /\\ state[i] = Primary\n    /\\ ConfigIsCommitted(i)\n    /\\ QuorumsOverlap(config[i], newConfig)\n    /\\ i \\in newConfig\n    /\\ configTerm' = [configTerm EXCEPT ![i] = currentTerm[i]]\n    /\\ configVersion' = [configVersion EXCEPT ![i] = configVersion[i] + 1]\n    /\\ config' = [config EXCEPT ![i] = newConfig]\n    /\\ UNCHANGED <<currentTerm, state>>\n","location":"line 123, col 1 to line 131, col 39 of module MongoLoglessDynamicRaft","operatorName":"Reconfig","paramNum":2,"type":"Action"},{"concreteContent":"SendConfig(i, j) ==\n    /\\ state[j] = Secondary\n    /\\ IsNewerConfig(i, j)\n    /\\ configVersion' = [configVersion EXCEPT ![j] = configVersion[i]]\n    /\\ configTerm' = [configTerm EXCEPT ![j] = configTerm[i]]\n    /\\ config' = [config EXCEPT ![j] = config[i]]\n    /\\ UNCHANGED <<currentTerm, state>>\n","location":"line 134, col 1 to line 140, col 39 of module MongoLoglessDynamicRaft","operatorName":"SendConfig","paramNum":2,"type":"Action"},{"concreteContent":"Init == \n    /\\ currentTerm = [i \\in Server |-> InitTerm]\n    /\\ state       = [i \\in Server |-> Secondary]\n    /\\ configVersion =  [i \\in Server |-> 1]\n    /\\ configTerm    =  [i \\in Server |-> InitTerm]\n    /\\ \\E initConfig \\in SUBSET Server :\n        /\\ initConfig # {}\n        /\\ config = [i \\in Server |-> initConfig]\n","location":"line 142, col 1 to line 149, col 49 of module MongoLoglessDynamicRaft","operatorName":"Init","type":"State"},{"concreteContent":"ReconfigAction == \\E s \\in Server, newConfig \\in SUBSET Server : Reconfig(s, newConfig)","location":"line 151, col 1 to line 151, col 87 of module MongoLoglessDynamicRaft","operatorName":"ReconfigAction","type":"State"},{"concreteContent":"SendConfigAction == \\E s,t \\in Server : SendConfig(s, t)","location":"line 152, col 1 to line 152, col 56 of module MongoLoglessDynamicRaft","operatorName":"SendConfigAction","type":"State"},{"concreteContent":"BecomeLeaderAction == \\E i \\in Server : \\E Q \\in Quorums(config[i]) :  BecomeLeader(i, Q)","location":"line 153, col 1 to line 153, col 89 of module MongoLoglessDynamicRaft","operatorName":"BecomeLeaderAction","type":"State"},{"concreteContent":"UpdateTermsAction == \\E s,t \\in Server : UpdateTerms(s,t)","location":"line 154, col 1 to line 154, col 57 of module MongoLoglessDynamicRaft","operatorName":"UpdateTermsAction","type":"State"},{"concreteContent":"Next ==\n    \\/ ReconfigAction\n    \\/ SendConfigAction\n    \\/ BecomeLeaderAction\n    \\/ UpdateTermsAction\n","location":"line 156, col 1 to line 160, col 24 of module MongoLoglessDynamicRaft","operatorName":"Next","type":"State"},{"concreteContent":"Spec == Init /\\ [][Next]_vars","location":"line 162, col 1 to line 162, col 29 of module MongoLoglessDynamicRaft","operatorName":"Spec","type":"State"},{"concreteContent":"CV(i) == <<configVersion[i], configTerm[i]>>","location":"line 166, col 1 to line 166, col 44 of module MongoLoglessDynamicRaft","operatorName":"CV","paramNum":1,"type":"Action"},{"concreteContent":"ConfigDisabled(i) == \n    \\A Q \\in Quorums(config[i]) : \\E n \\in Q : NewerConfig(CV(n), CV(i))\n","location":"line 167, col 1 to line 168, col 72 of module MongoLoglessDynamicRaft","operatorName":"ConfigDisabled","paramNum":1,"type":"Action"},{"concreteContent":"OnePrimaryPerTerm ==\n    \\A s,t \\in Server : \n        (/\\ state[s] = Primary \n         /\\ state[t] = Primary \n         /\\ currentTerm[s] = currentTerm[t]) => (s = t)\n","location":"line 170, col 1 to line 174, col 55 of module MongoLoglessDynamicRaft","operatorName":"OnePrimaryPerTerm","type":"State"},{"concreteContent":"Safety == \n    /\\ OnePrimaryPerTerm\n","location":"line 177, col 1 to line 178, col 24 of module MongoLoglessDynamicRaft","operatorName":"Safety","type":"State"},{"concreteContent":"SeqOf(set, n) == UNION {[1..m -> set] : m \\in 0..n}","location":"line 182, col 1 to line 182, col 51 of module MongoLoglessDynamicRaft","operatorName":"SeqOf","paramNum":2,"type":"Action"},{"concreteContent":"BoundedSeq(S, n) == SeqOf(S, n)","location":"line 183, col 1 to line 183, col 31 of module MongoLoglessDynamicRaft","operatorName":"BoundedSeq","paramNum":2,"type":"Action"},{"concreteContent":"NatFinite == 0..3","location":"line 184, col 1 to line 184, col 17 of module MongoLoglessDynamicRaft","operatorName":"NatFinite","type":"State"},{"concreteContent":"PositiveNat == 1..3","location":"line 185, col 1 to line 185, col 19 of module MongoLoglessDynamicRaft","operatorName":"PositiveNat","type":"State"},{"concreteContent":"NumRandSubsets == 13","location":"line 186, col 1 to line 186, col 20 of module MongoLoglessDynamicRaft","operatorName":"NumRandSubsets","type":"State"},{"concreteContent":"TypeOK ==\n    /\\ currentTerm \\in [Server -> Nat]\n    /\\ state \\in [Server -> {Secondary, Primary}]\n    /\\ config \\in [Server -> SUBSET Server]\n    /\\ configVersion \\in [Server -> Nat]\n    /\\ configTerm \\in [Server -> Nat]\n","location":"line 188, col 1 to line 193, col 37 of module MongoLoglessDynamicRaft","operatorName":"TypeOK","type":"State"},{"concreteContent":"TypeOKRandom == \n    /\\ currentTerm \\in RandomSubset(3, [Server -> InitTerm..MaxTerm])\n    /\\ state \\in RandomSubset(NumRandSubsets, [Server -> {Secondary, Primary}])\n    /\\ config \\in RandomSubset(NumRandSubsets, [Server -> SUBSET Server])\n    /\\ configVersion \\in RandomSubset(NumRandSubsets, [Server -> 0..MaxConfigVersion])\n    /\\ configTerm \\in RandomSubset(NumRandSubsets, [Server -> InitTerm..MaxTerm])\n","location":"line 195, col 1 to line 200, col 81 of module MongoLoglessDynamicRaft","operatorName":"TypeOKRandom","type":"State"},{"concreteContent":"StateConstraint == \\A s \\in Server :\n                    /\\ currentTerm[s] <= MaxTerm\n                    /\\ configVersion[s] <= MaxConfigVersion\n","location":"line 203, col 1 to line 205, col 59 of module MongoLoglessDynamicRaft","operatorName":"StateConstraint","type":"State"},{"concreteContent":"NextUnchanged == UNCHANGED vars","location":"line 207, col 1 to line 207, col 31 of module MongoLoglessDynamicRaft","operatorName":"NextUnchanged","type":"State"},{"concreteContent":"Symmetry == Permutations(Server)","location":"line 209, col 1 to line 209, col 32 of module MongoLoglessDynamicRaft","operatorName":"Symmetry","type":"State"},{"concreteContent":"Test == TLCGet(\"level\")<15","location":"line 211, col 1 to line 211, col 26 of module MongoLoglessDynamicRaft","operatorName":"Test","type":"State"}]}}